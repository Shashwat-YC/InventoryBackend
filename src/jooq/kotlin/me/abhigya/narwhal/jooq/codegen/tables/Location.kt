/*
 * This file is generated by jOOQ.
 */
package me.ave.inventory.jooq.codegen.tables


import javax.annotation.processing.Generated

import kotlin.collections.Collection
import kotlin.collections.List

import me.ave.inventory.jooq.codegen.Public
import me.ave.inventory.jooq.codegen.keys.LOCATION_PKEY
import me.ave.inventory.jooq.codegen.keys.LOCATION__FK_ROOMLOCATION
import me.ave.inventory.jooq.codegen.keys.MACHINETOLOCATION__FK_LOCATION
import me.ave.inventory.jooq.codegen.keys.PACKETRECORD__FK_LOCATION
import me.ave.inventory.jooq.codegen.keys.UQ_LOCATION
import me.ave.inventory.jooq.codegen.tables.Machineinfo.MachineinfoPath
import me.ave.inventory.jooq.codegen.tables.Machinetolocation.MachinetolocationPath
import me.ave.inventory.jooq.codegen.tables.Packetrecord.PacketrecordPath
import me.ave.inventory.jooq.codegen.tables.Room.RoomPath
import me.ave.inventory.jooq.codegen.tables.records.LocationRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.7",
        "schema version:public_2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Location(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, LocationRecord>?,
    parentPath: InverseForeignKey<out Record, LocationRecord>?,
    aliased: Table<LocationRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<LocationRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.location</code>
         */
        val LOCATION: Location = Location()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LocationRecord> = LocationRecord::class.java

    /**
     * The column <code>public.location.id</code>.
     */
    val ID: TableField<LocationRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.location.room_id</code>.
     */
    val ROOM_ID: TableField<LocationRecord, Int?> = createField(DSL.name("room_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.location.rack</code>.
     */
    val RACK: TableField<LocationRecord, Int?> = createField(DSL.name("rack"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>public.location.shelf</code>.
     */
    val SHELF: TableField<LocationRecord, Int?> = createField(DSL.name("shelf"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<LocationRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<LocationRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<LocationRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.location</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.location</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.location</code> table reference
     */
    constructor(): this(DSL.name("location"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, LocationRecord>?, parentPath: InverseForeignKey<out Record, LocationRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, LOCATION, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class LocationPath : Location, Path<LocationRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, LocationRecord>?, parentPath: InverseForeignKey<out Record, LocationRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<LocationRecord>): super(alias, aliased)
        override fun `as`(alias: String): LocationPath = LocationPath(DSL.name(alias), this)
        override fun `as`(alias: Name): LocationPath = LocationPath(alias, this)
        override fun `as`(alias: Table<*>): LocationPath = LocationPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<LocationRecord, Int?> = super.getIdentity() as Identity<LocationRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<LocationRecord> = LOCATION_PKEY
    override fun getUniqueKeys(): List<UniqueKey<LocationRecord>> = listOf(UQ_LOCATION)
    override fun getReferences(): List<ForeignKey<LocationRecord, *>> = listOf(LOCATION__FK_ROOMLOCATION)

    private lateinit var _room: RoomPath

    /**
     * Get the implicit join path to the <code>public.room</code> table.
     */
    fun room(): RoomPath {
        if (!this::_room.isInitialized)
            _room = RoomPath(this, LOCATION__FK_ROOMLOCATION, null)

        return _room;
    }

    val room: RoomPath
        get(): RoomPath = room()

    private lateinit var _machinetolocation: MachinetolocationPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.machinetolocation</code> table
     */
    fun machinetolocation(): MachinetolocationPath {
        if (!this::_machinetolocation.isInitialized)
            _machinetolocation = MachinetolocationPath(this, null, MACHINETOLOCATION__FK_LOCATION.inverseKey)

        return _machinetolocation;
    }

    val machinetolocation: MachinetolocationPath
        get(): MachinetolocationPath = machinetolocation()

    private lateinit var _packetrecord: PacketrecordPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.packetrecord</code> table
     */
    fun packetrecord(): PacketrecordPath {
        if (!this::_packetrecord.isInitialized)
            _packetrecord = PacketrecordPath(this, null, PACKETRECORD__FK_LOCATION.inverseKey)

        return _packetrecord;
    }

    val packetrecord: PacketrecordPath
        get(): PacketrecordPath = packetrecord()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.machineinfo</code> table
     */
    val machineinfo: MachineinfoPath
        get(): MachineinfoPath = machinetolocation().machineinfo()
    override fun `as`(alias: String): Location = Location(DSL.name(alias), this)
    override fun `as`(alias: Name): Location = Location(alias, this)
    override fun `as`(alias: Table<*>): Location = Location(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Location = Location(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Location = Location(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Location = Location(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Location = Location(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Location = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Location = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Location = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Location = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Location = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Location = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Location = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Location = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Location = where(DSL.notExists(select))
}
