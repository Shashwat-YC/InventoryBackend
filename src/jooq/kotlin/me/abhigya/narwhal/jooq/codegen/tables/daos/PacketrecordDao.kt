/*
 * This file is generated by jOOQ.
 */
package me.ave.inventory.jooq.codegen.tables.daos


import javax.annotation.processing.Generated

import kotlin.collections.List

import me.ave.inventory.jooq.codegen.enums.PacketType
import me.ave.inventory.jooq.codegen.tables.Packetrecord
import me.ave.inventory.jooq.codegen.tables.records.PacketrecordRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.7",
        "schema version:public_2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class PacketrecordDao(configuration: Configuration?) : DAOImpl<PacketrecordRecord, me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord, Int>(Packetrecord.PACKETRECORD, me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord::class.java, configuration) {

    /**
     * Create a new PacketrecordDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetchRange(Packetrecord.PACKETRECORD.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetch(Packetrecord.PACKETRECORD.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord? = fetchOne(Packetrecord.PACKETRECORD.ID, value)

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCode(lowerInclusive: String?, upperInclusive: String?): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetchRange(Packetrecord.PACKETRECORD.CODE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    fun fetchByCode(vararg values: String): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetch(Packetrecord.PACKETRECORD.CODE, *values)

    /**
     * Fetch records that have <code>rfid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRfid(lowerInclusive: String?, upperInclusive: String?): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetchRange(Packetrecord.PACKETRECORD.RFID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rfid IN (values)</code>
     */
    fun fetchByRfid(vararg values: String): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetch(Packetrecord.PACKETRECORD.RFID, *values)

    /**
     * Fetch records that have <code>quantity BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfQuantity(lowerInclusive: Int?, upperInclusive: Int?): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetchRange(Packetrecord.PACKETRECORD.QUANTITY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>quantity IN (values)</code>
     */
    fun fetchByQuantity(vararg values: Int): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetch(Packetrecord.PACKETRECORD.QUANTITY, *values.toTypedArray())

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfType(lowerInclusive: PacketType?, upperInclusive: PacketType?): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetchRange(Packetrecord.PACKETRECORD.TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    fun fetchByType(vararg values: PacketType): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetch(Packetrecord.PACKETRECORD.TYPE, *values)

    /**
     * Fetch records that have <code>location_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLocationId(lowerInclusive: Int?, upperInclusive: Int?): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetchRange(Packetrecord.PACKETRECORD.LOCATION_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>location_id IN (values)</code>
     */
    fun fetchByLocationId(vararg values: Int): List<me.ave.inventory.jooq.codegen.tables.pojos.Packetrecord> = fetch(Packetrecord.PACKETRECORD.LOCATION_ID, *values.toTypedArray())
}
