/*
 * This file is generated by jOOQ.
 */
package me.ave.inventory.jooq.codegen.tables


import javax.annotation.processing.Generated

import kotlin.collections.Collection
import kotlin.collections.List

import me.ave.inventory.jooq.codegen.Public
import me.ave.inventory.jooq.codegen.keys.MAINTENANCEUPDATEDPACKET__FK_MAINTENANCEUPDATEDPACKET
import me.ave.inventory.jooq.codegen.keys.MAINTENANCEUPDATEDPACKET__FK_UPDATEDPACKETSPAREPART
import me.ave.inventory.jooq.codegen.keys.UQ_MAINTENANCEUPDATEDPACKET
import me.ave.inventory.jooq.codegen.tables.Maintenancerecord.MaintenancerecordPath
import me.ave.inventory.jooq.codegen.tables.Sparepartinfo.SparepartinfoPath
import me.ave.inventory.jooq.codegen.tables.records.MaintenanceupdatedpacketRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.7",
        "schema version:public_2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Maintenanceupdatedpacket(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, MaintenanceupdatedpacketRecord>?,
    parentPath: InverseForeignKey<out Record, MaintenanceupdatedpacketRecord>?,
    aliased: Table<MaintenanceupdatedpacketRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<MaintenanceupdatedpacketRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.maintenanceupdatedpacket</code>
         */
        val MAINTENANCEUPDATEDPACKET: Maintenanceupdatedpacket = Maintenanceupdatedpacket()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MaintenanceupdatedpacketRecord> = MaintenanceupdatedpacketRecord::class.java

    /**
     * The column <code>public.maintenanceupdatedpacket.maintenance_id</code>.
     */
    val MAINTENANCE_ID: TableField<MaintenanceupdatedpacketRecord, Int?> = createField(DSL.name("maintenance_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.maintenanceupdatedpacket.spare_part_code</code>.
     */
    val SPARE_PART_CODE: TableField<MaintenanceupdatedpacketRecord, String?> = createField(DSL.name("spare_part_code"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    /**
     * The column <code>public.maintenanceupdatedpacket.updated_quantity</code>.
     */
    val UPDATED_QUANTITY: TableField<MaintenanceupdatedpacketRecord, Int?> = createField(DSL.name("updated_quantity"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<MaintenanceupdatedpacketRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<MaintenanceupdatedpacketRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<MaintenanceupdatedpacketRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.maintenanceupdatedpacket</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.maintenanceupdatedpacket</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.maintenanceupdatedpacket</code> table reference
     */
    constructor(): this(DSL.name("maintenanceupdatedpacket"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MaintenanceupdatedpacketRecord>?, parentPath: InverseForeignKey<out Record, MaintenanceupdatedpacketRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, MAINTENANCEUPDATEDPACKET, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class MaintenanceupdatedpacketPath : Maintenanceupdatedpacket, Path<MaintenanceupdatedpacketRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MaintenanceupdatedpacketRecord>?, parentPath: InverseForeignKey<out Record, MaintenanceupdatedpacketRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<MaintenanceupdatedpacketRecord>): super(alias, aliased)
        override fun `as`(alias: String): MaintenanceupdatedpacketPath = MaintenanceupdatedpacketPath(DSL.name(alias), this)
        override fun `as`(alias: Name): MaintenanceupdatedpacketPath = MaintenanceupdatedpacketPath(alias, this)
        override fun `as`(alias: Table<*>): MaintenanceupdatedpacketPath = MaintenanceupdatedpacketPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getUniqueKeys(): List<UniqueKey<MaintenanceupdatedpacketRecord>> = listOf(UQ_MAINTENANCEUPDATEDPACKET)
    override fun getReferences(): List<ForeignKey<MaintenanceupdatedpacketRecord, *>> = listOf(MAINTENANCEUPDATEDPACKET__FK_MAINTENANCEUPDATEDPACKET, MAINTENANCEUPDATEDPACKET__FK_UPDATEDPACKETSPAREPART)

    private lateinit var _maintenancerecord: MaintenancerecordPath

    /**
     * Get the implicit join path to the <code>public.maintenancerecord</code>
     * table.
     */
    fun maintenancerecord(): MaintenancerecordPath {
        if (!this::_maintenancerecord.isInitialized)
            _maintenancerecord = MaintenancerecordPath(this, MAINTENANCEUPDATEDPACKET__FK_MAINTENANCEUPDATEDPACKET, null)

        return _maintenancerecord;
    }

    val maintenancerecord: MaintenancerecordPath
        get(): MaintenancerecordPath = maintenancerecord()

    private lateinit var _sparepartinfo: SparepartinfoPath

    /**
     * Get the implicit join path to the <code>public.sparepartinfo</code>
     * table.
     */
    fun sparepartinfo(): SparepartinfoPath {
        if (!this::_sparepartinfo.isInitialized)
            _sparepartinfo = SparepartinfoPath(this, MAINTENANCEUPDATEDPACKET__FK_UPDATEDPACKETSPAREPART, null)

        return _sparepartinfo;
    }

    val sparepartinfo: SparepartinfoPath
        get(): SparepartinfoPath = sparepartinfo()
    override fun `as`(alias: String): Maintenanceupdatedpacket = Maintenanceupdatedpacket(DSL.name(alias), this)
    override fun `as`(alias: Name): Maintenanceupdatedpacket = Maintenanceupdatedpacket(alias, this)
    override fun `as`(alias: Table<*>): Maintenanceupdatedpacket = Maintenanceupdatedpacket(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Maintenanceupdatedpacket = Maintenanceupdatedpacket(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Maintenanceupdatedpacket = Maintenanceupdatedpacket(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Maintenanceupdatedpacket = Maintenanceupdatedpacket(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Maintenanceupdatedpacket = Maintenanceupdatedpacket(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Maintenanceupdatedpacket = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Maintenanceupdatedpacket = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Maintenanceupdatedpacket = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Maintenanceupdatedpacket = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Maintenanceupdatedpacket = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Maintenanceupdatedpacket = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Maintenanceupdatedpacket = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Maintenanceupdatedpacket = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Maintenanceupdatedpacket = where(DSL.notExists(select))
}
