/*
 * This file is generated by jOOQ.
 */
package me.ave.inventory.jooq.codegen.tables


import javax.annotation.processing.Generated

import kotlin.collections.Collection
import kotlin.collections.List

import kotlinx.datetime.Instant

import me.ave.inventory.database.converter.KotlinInstantConverter
import me.ave.inventory.jooq.codegen.Public
import me.ave.inventory.jooq.codegen.keys.MACHINE_PKEY
import me.ave.inventory.jooq.codegen.keys.MACHINE__FK_MACHINEINFO
import me.ave.inventory.jooq.codegen.keys.MAINTENANCERECORD__FK_MAINTAINMACHINE
import me.ave.inventory.jooq.codegen.tables.Machineinfo.MachineinfoPath
import me.ave.inventory.jooq.codegen.tables.Maintenancerecord.MaintenancerecordPath
import me.ave.inventory.jooq.codegen.tables.records.MachineRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.7",
        "schema version:public_2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Machine(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, MachineRecord>?,
    parentPath: InverseForeignKey<out Record, MachineRecord>?,
    aliased: Table<MachineRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<MachineRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.machine</code>
         */
        val MACHINE: Machine = Machine()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MachineRecord> = MachineRecord::class.java

    /**
     * The column <code>public.machine.model</code>.
     */
    val MODEL: TableField<MachineRecord, String?> = createField(DSL.name("model"), SQLDataType.VARCHAR(3).nullable(false), this, "")

    /**
     * The column <code>public.machine.machine_no</code>.
     */
    val MACHINE_NO: TableField<MachineRecord, Int?> = createField(DSL.name("machine_no"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.machine.last_maintenance</code>.
     */
    val LAST_MAINTENANCE: TableField<MachineRecord, Instant?> = createField(DSL.name("last_maintenance"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "", KotlinInstantConverter())

    /**
     * The column <code>public.machine.avg_rh</code>.
     */
    val AVG_RH: TableField<MachineRecord, Int?> = createField(DSL.name("avg_rh"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<MachineRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<MachineRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<MachineRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.machine</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.machine</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.machine</code> table reference
     */
    constructor(): this(DSL.name("machine"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MachineRecord>?, parentPath: InverseForeignKey<out Record, MachineRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, MACHINE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class MachinePath : Machine, Path<MachineRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MachineRecord>?, parentPath: InverseForeignKey<out Record, MachineRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<MachineRecord>): super(alias, aliased)
        override fun `as`(alias: String): MachinePath = MachinePath(DSL.name(alias), this)
        override fun `as`(alias: Name): MachinePath = MachinePath(alias, this)
        override fun `as`(alias: Table<*>): MachinePath = MachinePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<MachineRecord> = MACHINE_PKEY
    override fun getReferences(): List<ForeignKey<MachineRecord, *>> = listOf(MACHINE__FK_MACHINEINFO)

    private lateinit var _machineinfo: MachineinfoPath

    /**
     * Get the implicit join path to the <code>public.machineinfo</code> table.
     */
    fun machineinfo(): MachineinfoPath {
        if (!this::_machineinfo.isInitialized)
            _machineinfo = MachineinfoPath(this, MACHINE__FK_MACHINEINFO, null)

        return _machineinfo;
    }

    val machineinfo: MachineinfoPath
        get(): MachineinfoPath = machineinfo()

    private lateinit var _maintenancerecord: MaintenancerecordPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.maintenancerecord</code> table
     */
    fun maintenancerecord(): MaintenancerecordPath {
        if (!this::_maintenancerecord.isInitialized)
            _maintenancerecord = MaintenancerecordPath(this, null, MAINTENANCERECORD__FK_MAINTAINMACHINE.inverseKey)

        return _maintenancerecord;
    }

    val maintenancerecord: MaintenancerecordPath
        get(): MaintenancerecordPath = maintenancerecord()
    override fun `as`(alias: String): Machine = Machine(DSL.name(alias), this)
    override fun `as`(alias: Name): Machine = Machine(alias, this)
    override fun `as`(alias: Table<*>): Machine = Machine(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Machine = Machine(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Machine = Machine(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Machine = Machine(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Machine = Machine(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Machine = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Machine = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Machine = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Machine = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Machine = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Machine = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Machine = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Machine = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Machine = where(DSL.notExists(select))
}
