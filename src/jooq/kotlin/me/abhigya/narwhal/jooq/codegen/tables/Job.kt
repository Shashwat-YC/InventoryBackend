/*
 * This file is generated by jOOQ.
 */
package me.ave.inventory.jooq.codegen.tables


import javax.annotation.processing.Generated

import kotlin.collections.Collection
import kotlin.collections.List

import me.ave.inventory.jooq.codegen.Public
import me.ave.inventory.jooq.codegen.enums.JobKind
import me.ave.inventory.jooq.codegen.enums.JobPlace
import me.ave.inventory.jooq.codegen.enums.Pic
import me.ave.inventory.jooq.codegen.keys.JOBTOSPAREPART__FK_JOBSPAREPART
import me.ave.inventory.jooq.codegen.keys.JOB_PKEY
import me.ave.inventory.jooq.codegen.keys.JOB__FK_JOBSCHEDULE
import me.ave.inventory.jooq.codegen.keys.MAINTENANCERECORD__FK_MAINTAINJOB
import me.ave.inventory.jooq.codegen.tables.Jobtosparepart.JobtosparepartPath
import me.ave.inventory.jooq.codegen.tables.Maintenancerecord.MaintenancerecordPath
import me.ave.inventory.jooq.codegen.tables.Scheduleinfo.ScheduleinfoPath
import me.ave.inventory.jooq.codegen.tables.Sparepartinfo.SparepartinfoPath
import me.ave.inventory.jooq.codegen.tables.records.JobRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.7",
        "schema version:public_2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Job(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JobRecord>?,
    parentPath: InverseForeignKey<out Record, JobRecord>?,
    aliased: Table<JobRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JobRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.job</code>
         */
        val JOB: Job = Job()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JobRecord> = JobRecord::class.java

    /**
     * The column <code>public.job.pms_code</code>.
     */
    val PMS_CODE: TableField<JobRecord, String?> = createField(DSL.name("pms_code"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    /**
     * The column <code>public.job.description</code>.
     */
    val DESCRIPTION: TableField<JobRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>public.job.place</code>.
     */
    val PLACE: TableField<JobRecord, JobPlace?> = createField(DSL.name("place"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(JobPlace::class.java), this, "")

    /**
     * The column <code>public.job.kind</code>.
     */
    val KIND: TableField<JobRecord, JobKind?> = createField(DSL.name("kind"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(JobKind::class.java), this, "")

    /**
     * The column <code>public.job.schedule_key</code>.
     */
    val SCHEDULE_KEY: TableField<JobRecord, Int?> = createField(DSL.name("schedule_key"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.job.model</code>.
     */
    val MODEL: TableField<JobRecord, String?> = createField(DSL.name("model"), SQLDataType.VARCHAR(3).nullable(false), this, "")

    /**
     * The column <code>public.job.pic</code>.
     */
    val PIC: TableField<JobRecord, Pic?> = createField(DSL.name("pic"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Pic::class.java), this, "")

    private constructor(alias: Name, aliased: Table<JobRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JobRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JobRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.job</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.job</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.job</code> table reference
     */
    constructor(): this(DSL.name("job"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JobRecord>?, parentPath: InverseForeignKey<out Record, JobRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, JOB, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JobPath : Job, Path<JobRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JobRecord>?, parentPath: InverseForeignKey<out Record, JobRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<JobRecord>): super(alias, aliased)
        override fun `as`(alias: String): JobPath = JobPath(DSL.name(alias), this)
        override fun `as`(alias: Name): JobPath = JobPath(alias, this)
        override fun `as`(alias: Table<*>): JobPath = JobPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<JobRecord> = JOB_PKEY
    override fun getReferences(): List<ForeignKey<JobRecord, *>> = listOf(JOB__FK_JOBSCHEDULE)

    private lateinit var _scheduleinfo: ScheduleinfoPath

    /**
     * Get the implicit join path to the <code>public.scheduleinfo</code> table.
     */
    fun scheduleinfo(): ScheduleinfoPath {
        if (!this::_scheduleinfo.isInitialized)
            _scheduleinfo = ScheduleinfoPath(this, JOB__FK_JOBSCHEDULE, null)

        return _scheduleinfo;
    }

    val scheduleinfo: ScheduleinfoPath
        get(): ScheduleinfoPath = scheduleinfo()

    private lateinit var _jobtosparepart: JobtosparepartPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.jobtosparepart</code> table
     */
    fun jobtosparepart(): JobtosparepartPath {
        if (!this::_jobtosparepart.isInitialized)
            _jobtosparepart = JobtosparepartPath(this, null, JOBTOSPAREPART__FK_JOBSPAREPART.inverseKey)

        return _jobtosparepart;
    }

    val jobtosparepart: JobtosparepartPath
        get(): JobtosparepartPath = jobtosparepart()

    private lateinit var _maintenancerecord: MaintenancerecordPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.maintenancerecord</code> table
     */
    fun maintenancerecord(): MaintenancerecordPath {
        if (!this::_maintenancerecord.isInitialized)
            _maintenancerecord = MaintenancerecordPath(this, null, MAINTENANCERECORD__FK_MAINTAINJOB.inverseKey)

        return _maintenancerecord;
    }

    val maintenancerecord: MaintenancerecordPath
        get(): MaintenancerecordPath = maintenancerecord()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.sparepartinfo</code> table
     */
    val sparepartinfo: SparepartinfoPath
        get(): SparepartinfoPath = jobtosparepart().sparepartinfo()
    override fun `as`(alias: String): Job = Job(DSL.name(alias), this)
    override fun `as`(alias: Name): Job = Job(alias, this)
    override fun `as`(alias: Table<*>): Job = Job(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Job = Job(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Job = Job(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Job = Job(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Job = Job(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Job = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Job = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Job = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Job = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Job = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Job = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Job = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Job = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Job = where(DSL.notExists(select))
}
