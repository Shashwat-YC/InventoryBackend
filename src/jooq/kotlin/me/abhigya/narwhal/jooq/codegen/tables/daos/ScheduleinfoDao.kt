/*
 * This file is generated by jOOQ.
 */
package me.ave.inventory.jooq.codegen.tables.daos


import javax.annotation.processing.Generated

import kotlin.collections.List

import me.ave.inventory.jooq.codegen.enums.ScheduleType
import me.ave.inventory.jooq.codegen.tables.Scheduleinfo
import me.ave.inventory.jooq.codegen.tables.records.ScheduleinfoRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.7",
        "schema version:public_2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class ScheduleinfoDao(configuration: Configuration?) : DAOImpl<ScheduleinfoRecord, me.ave.inventory.jooq.codegen.tables.pojos.Scheduleinfo, Int>(Scheduleinfo.SCHEDULEINFO, me.ave.inventory.jooq.codegen.tables.pojos.Scheduleinfo::class.java, configuration) {

    /**
     * Create a new ScheduleinfoDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: me.ave.inventory.jooq.codegen.tables.pojos.Scheduleinfo): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<me.ave.inventory.jooq.codegen.tables.pojos.Scheduleinfo> = fetchRange(Scheduleinfo.SCHEDULEINFO.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<me.ave.inventory.jooq.codegen.tables.pojos.Scheduleinfo> = fetch(Scheduleinfo.SCHEDULEINFO.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): me.ave.inventory.jooq.codegen.tables.pojos.Scheduleinfo? = fetchOne(Scheduleinfo.SCHEDULEINFO.ID, value)

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfType(lowerInclusive: ScheduleType?, upperInclusive: ScheduleType?): List<me.ave.inventory.jooq.codegen.tables.pojos.Scheduleinfo> = fetchRange(Scheduleinfo.SCHEDULEINFO.TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    fun fetchByType(vararg values: ScheduleType): List<me.ave.inventory.jooq.codegen.tables.pojos.Scheduleinfo> = fetch(Scheduleinfo.SCHEDULEINFO.TYPE, *values)

    /**
     * Fetch records that have <code>delay BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDelay(lowerInclusive: Int?, upperInclusive: Int?): List<me.ave.inventory.jooq.codegen.tables.pojos.Scheduleinfo> = fetchRange(Scheduleinfo.SCHEDULEINFO.DELAY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>delay IN (values)</code>
     */
    fun fetchByDelay(vararg values: Int): List<me.ave.inventory.jooq.codegen.tables.pojos.Scheduleinfo> = fetch(Scheduleinfo.SCHEDULEINFO.DELAY, *values.toTypedArray())
}
