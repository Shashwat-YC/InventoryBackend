/*
 * This file is generated by jOOQ.
 */
package me.ave.inventory.jooq.codegen.tables.daos


import java.time.LocalDateTime

import javax.annotation.processing.Generated

import kotlin.collections.List

import me.ave.inventory.jooq.codegen.tables.Databasechangeloglock
import me.ave.inventory.jooq.codegen.tables.records.DatabasechangeloglockRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.7",
        "schema version:public_2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class DatabasechangeloglockDao(configuration: Configuration?) : DAOImpl<DatabasechangeloglockRecord, me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock, Int>(Databasechangeloglock.DATABASECHANGELOGLOCK, me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock::class.java, configuration) {

    /**
     * Create a new DatabasechangeloglockDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock> = fetchRange(Databasechangeloglock.DATABASECHANGELOGLOCK.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock> = fetch(Databasechangeloglock.DATABASECHANGELOGLOCK.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock? = fetchOne(Databasechangeloglock.DATABASECHANGELOGLOCK.ID, value)

    /**
     * Fetch records that have <code>locked BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLocked(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock> = fetchRange(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>locked IN (values)</code>
     */
    fun fetchByLocked(vararg values: Boolean): List<me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock> = fetch(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKED, *values.toTypedArray())

    /**
     * Fetch records that have <code>lockgranted BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLockgranted(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock> = fetchRange(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKGRANTED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>lockgranted IN (values)</code>
     */
    fun fetchByLockgranted(vararg values: LocalDateTime): List<me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock> = fetch(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKGRANTED, *values)

    /**
     * Fetch records that have <code>lockedby BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLockedby(lowerInclusive: String?, upperInclusive: String?): List<me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock> = fetchRange(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKEDBY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>lockedby IN (values)</code>
     */
    fun fetchByLockedby(vararg values: String): List<me.ave.inventory.jooq.codegen.tables.pojos.Databasechangeloglock> = fetch(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKEDBY, *values)
}
