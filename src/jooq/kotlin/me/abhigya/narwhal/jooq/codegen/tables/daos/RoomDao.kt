/*
 * This file is generated by jOOQ.
 */
package me.ave.inventory.jooq.codegen.tables.daos


import javax.annotation.processing.Generated

import kotlin.collections.List

import me.ave.inventory.jooq.codegen.tables.Room
import me.ave.inventory.jooq.codegen.tables.records.RoomRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.7",
        "schema version:public_2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class RoomDao(configuration: Configuration?) : DAOImpl<RoomRecord, me.ave.inventory.jooq.codegen.tables.pojos.Room, Int>(Room.ROOM, me.ave.inventory.jooq.codegen.tables.pojos.Room::class.java, configuration) {

    /**
     * Create a new RoomDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: me.ave.inventory.jooq.codegen.tables.pojos.Room): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<me.ave.inventory.jooq.codegen.tables.pojos.Room> = fetchRange(Room.ROOM.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<me.ave.inventory.jooq.codegen.tables.pojos.Room> = fetch(Room.ROOM.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): me.ave.inventory.jooq.codegen.tables.pojos.Room? = fetchOne(Room.ROOM.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<me.ave.inventory.jooq.codegen.tables.pojos.Room> = fetchRange(Room.ROOM.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<me.ave.inventory.jooq.codegen.tables.pojos.Room> = fetch(Room.ROOM.NAME, *values)

    /**
     * Fetch records that have <code>floor BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFloor(lowerInclusive: Int?, upperInclusive: Int?): List<me.ave.inventory.jooq.codegen.tables.pojos.Room> = fetchRange(Room.ROOM.FLOOR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>floor IN (values)</code>
     */
    fun fetchByFloor(vararg values: Int): List<me.ave.inventory.jooq.codegen.tables.pojos.Room> = fetch(Room.ROOM.FLOOR, *values.toTypedArray())
}
